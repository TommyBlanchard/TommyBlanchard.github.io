<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tommy Blanchard - Projects</title><link href="http://tommyblanchard.com/" rel="alternate"></link><link href="http://tommyblanchard.com/feeds/projects.atom.xml" rel="self"></link><id>http://tommyblanchard.com/</id><updated>2017-02-15T17:48:37-05:00</updated><entry><title>Unique Tag Cloud for Each Category in Pelican</title><link href="http://tommyblanchard.com/unique-tag-cloud-for-each-category-in-pelican" rel="alternate"></link><published>2017-02-15T17:48:37-05:00</published><updated>2017-02-15T17:48:37-05:00</updated><author><name>Tommy Blanchard</name></author><id>tag:tommyblanchard.com,2017-02-15:/unique-tag-cloud-for-each-category-in-pelican</id><summary type="html">&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; allows you to put articles into different 'categories'. On this site, I have the &lt;a href="http://tommyblanchard.com/category/blog"&gt;Blog&lt;/a&gt; and &lt;a href="http://tommyblanchard.com/category/projects"&gt;Projects&lt;/a&gt; categories. I wanted 'Projects' to be able to function as a portfolio. Ideally, it would have a tag cloud to allow someone to see all the different tools I've used for different â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; allows you to put articles into different 'categories'. On this site, I have the &lt;a href="http://tommyblanchard.com/category/blog"&gt;Blog&lt;/a&gt; and &lt;a href="http://tommyblanchard.com/category/projects"&gt;Projects&lt;/a&gt; categories. I wanted 'Projects' to be able to function as a portfolio. Ideally, it would have a tag cloud to allow someone to see all the different tools I've used for different projects, and easily find projects that involved the tools they're interested in.&lt;/p&gt;
&lt;p&gt;By default, Pelican does not have a tag cloud. In recent versions, &lt;a href="http://docs.getpelican.com/en/stable/faq.html#my-tag-cloud-is-missing-broken-since-i-upgraded-pelican"&gt;they've taken the tag cloud functionality out of the main program&lt;/a&gt; and put it into &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;a plugin&lt;/a&gt;. However, the plugin counts all tags across all articles, meaning my 'Blog' tags would be mixed in with the 'Projects' tags. I ended up needing to modify the plugin to get the functionality I wanted. Instructions in case you want to do the same thing are below.&lt;/p&gt;
&lt;h2&gt;Set up&lt;/h2&gt;
&lt;p&gt;Since I modified the base tag_cloud plugin, the set up is very similar to that described on the official &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/tag_cloud"&gt;tag cloud plugin page&lt;/a&gt;. First, &lt;strong&gt;pelicanconf.py&lt;/strong&gt; needs to be modified to look for the tag cloud plugin. If this is your first plugin, you should simply add these lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;PLUGIN_PATHS = [&amp;quot;plugins&amp;quot;]
PLUGINS = [&amp;quot;tag_cloud&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Otherwise, just add "tag_cloud" to your current PLUGINS list.&lt;/p&gt;
&lt;p&gt;Next, you'll need the tag_cloud.py file, and need to place it in your plugins folder. You can download my version of tag_cloud.py from the &lt;a href="https://github.com/TommyBlanchard/pelican-plugins/tree/master/tag_cloud"&gt;github repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The basic change from the original script is that instead of having a tag_cloud structure with just a list of the tags, tag_cloud is a dictionary with each key being a category and each value being a tag list. The hard part is that Pelican doesn't allow you to use dictionaries in its templates - it converts everything to a list. For clarity, I change the dictionary to a list before passing it to the generator. In the templates I use Jinga2 to loop through all of the entries and find the matching category, like an inefficient dictionary, as explained below.&lt;/p&gt;
&lt;h2&gt;Displaying the tag cloud&lt;/h2&gt;
&lt;p&gt;To display the tag clouds is a little more complicated than with the basic plugin. You probably don't want to tag clouds showing up on every page - I only wanted them on the category pages themselves, article pages, and tags pages.&lt;/p&gt;
&lt;p&gt;The different themes all have similar structures, but some might be a bit different. I use the &lt;a href="https://github.com/blueicefield/pelican-blueidea"&gt;blueidea theme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To have the tag list for a category appear on article pages, the following code should be added &lt;strong&gt;article.html&lt;/strong&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tagcloud&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;tag_cloud&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
        &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.category&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;cat.0&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;b&amp;gt;&amp;lt;center&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.0&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; Tags&lt;span class="nt"&gt;&amp;lt;/center&amp;gt;&amp;lt;/b&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tagcloud&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;tag&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;cat.1&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;tag-&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tag.1&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tag.0.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tag.0&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
                                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;TAG_CLOUD_BADGE&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                                    &lt;span class="nt"&gt;&amp;lt;span&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;badge&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;(&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;tag.2&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;)&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
                                &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
                            &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
                        &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
                    &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;                        
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt; 
         &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
     &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The placement of the code depends a bit on how you plan to style it and where you want it to show up. I have mine near the top, right below &lt;strong&gt;{% block content %}&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To add the tag cloud to the tags and categories pages, the same code needs to be added to index.html. Place it within the first item conditional, right after this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;{# First item #}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="nv"&gt;.first&lt;/span&gt; &lt;span class="k"&gt;and&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;articles_page.has_previous&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will take the category of the first article appearing on the page and generate the appropriate category tag cloud.&lt;/p&gt;
&lt;h2&gt;Settings and CSS Styling&lt;/h2&gt;
&lt;p&gt;The tag cloud should now display, just not necessarily how you want or where you want.&lt;/p&gt;
&lt;p&gt;The plugin allows you to have different sizes for tags based on how common they are. This can be altered by changing the TAG_CLOUD_STEPS value (default is 4, you can set TAG_CLOUD_STEPS=num in &lt;strong&gt;pelicanconf.py&lt;/strong&gt;). So use the following, adding as many li.tag-# as you have TAG_CLOUD_STEPS. You can also style the tag cloud list any way you want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.tagcloud&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nb"&gt;list-style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;padding&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="nc"&gt;.tagcloud&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;inline&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nc"&gt;.tag-1&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;150%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="nc"&gt;.tag-2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;font-size&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;120%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can also use CSS to style the div the tag appears in. Here is mine:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="nn"&gt;#tagcloud&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
    &lt;span class="nb"&gt;right&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;-150px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;top&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;250px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;position&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;140px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;background&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;white&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;moz&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;webkit&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nb"&gt;border&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt; &lt;span class="m"&gt;10px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(I have a fixed-width wrapper around everything including my tagcloud, so this positioning puts my sidebar just outside of the main content area)&lt;/p&gt;
&lt;p&gt;Full list of settings and defaults (you can add these lines to pelicanconf.py and change whatever values you want. If they don't exist in pelicanconf.py the defaults will be used):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;TAG_CLOUD_STEPS=4 #number of different sizes of fonts in the tag cloud
TAG_CLOUD_MAX_ITEMS=100 #number of different tags that can appear in tag cloud
TAG_CLOUD_SORTING=&amp;#39;size&amp;#39; #how tags will be ordered in the tag cloud. Valid values: random, alphabetically, alphabetically-rev, size and size-rev
TAG_CLOUD_BADGE=True #If True, displays the number of articles in each tag
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Known issues&lt;/h2&gt;
&lt;p&gt;If you have overlap in the tags used between the two categories, the page for that tag will give the tag cloud for whatever the first article on the page is for that tag.&lt;/p&gt;
&lt;p&gt;Since I used the same names as for the basic tag cloud plugin, this is not compatible with the base tag cloud.&lt;/p&gt;
&lt;p&gt;If this somehow becomes popular, I might try to make this plugin a bit more official - giving it a unique name, adding some tests, and creating a tagcloud.html file that just gets included instead of copying and pasting the same code to two separate locations. So if you're using the plugin (or interested in it), let me know! Right now I only put in enough work to get it working for myself.&lt;/p&gt;</content><category term="Pelican"></category><category term="Python"></category><category term="Jinga2"></category><category term="CSS"></category></entry><entry><title>Simple Stock Ticker App</title><link href="http://tommyblanchard.com/simple-stock-ticker-app" rel="alternate"></link><published>2017-02-04T15:14:21-05:00</published><updated>2017-02-04T15:14:21-05:00</updated><author><name>Tommy Blanchard</name></author><id>tag:tommyblanchard.com,2017-02-04:/simple-stock-ticker-app</id><summary type="html">&lt;p&gt;This was just a very simple learning project I did as part of &lt;a href="https://www.thedataincubator.com/"&gt;The Data Incubator&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The project itself was just a simple stock ticker. It requires as input the ticker, and produces a graph of the stock prices over time. &lt;a href="http://day8blanchard.herokuapp.com/index"&gt;Here is the finished product&lt;/a&gt;. You can also â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This was just a very simple learning project I did as part of &lt;a href="https://www.thedataincubator.com/"&gt;The Data Incubator&lt;/a&gt; program.&lt;/p&gt;
&lt;p&gt;The project itself was just a simple stock ticker. It requires as input the ticker, and produces a graph of the stock prices over time. &lt;a href="http://day8blanchard.herokuapp.com/index"&gt;Here is the finished product&lt;/a&gt;. You can also see the code for it &lt;a href="https://github.com/TommyBlanchard/FlaskHerokuStockTicker"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Flask Framework&lt;/h3&gt;
&lt;p&gt;&lt;a href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; is a lightweight Python framework. It's pretty simple to use. Set up some template html files, define some GET and POST methods, and you're good to go.&lt;/p&gt;
&lt;p&gt;The Data Incubator provded &lt;a href="https://github.com/thedataincubator/flask-demo"&gt;a pretty simple template&lt;/a&gt; for getting started. It provided some sample files, but the app itself just returned whatever the index template was.&lt;/p&gt;
&lt;p&gt;The modified the template to have two pages: the index page, which just has a GET command, and a graph page, which has POST.&lt;/p&gt;
&lt;p&gt;On the index page, the user inputs the ticker they want. This is used in the POST command, which requests and then plots the data.&lt;/p&gt;
&lt;h3&gt;Requesting Data&lt;/h3&gt;
&lt;p&gt;The data I used for my stock ticker came from &lt;a href="https://blog.quandl.com/api-for-stock-data"&gt;Quandl&lt;/a&gt;. I used Python's &lt;a href="http://docs.python-requests.org/en/master/"&gt;Requests&lt;/a&gt; library to make API requests.&lt;/p&gt;
&lt;h3&gt;Plotting Data&lt;/h3&gt;
&lt;p&gt;After requesting the data and getting it into a usable format, I plotted it using &lt;a href="http://bokeh.pydata.org/en/latest/"&gt;Bokeh&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Overall I really like Bokeh - some things are easier to do in Bokeh than in either Seaborn or matplotlib. But it definitely isn't perfect, and some things that feel like they should be trivial end up being more work than you would expect.&lt;/p&gt;
&lt;p&gt;But the real power of Bokeh is that the figures it produces can be output into javascript format so they can easily be placed into a website. So the code for the Bokeh figure is easily just placed into the graph.html template as javascript code, and it appears, all while staying in Python world.&lt;/p&gt;</content><category term="Python"></category><category term="Flask"></category><category term="Bokeh"></category><category term="Requests"></category><category term="Heroku"></category></entry><entry><title>This Website</title><link href="http://tommyblanchard.com/this-website" rel="alternate"></link><published>2017-01-18T10:04:08-05:00</published><updated>2017-01-18T10:04:08-05:00</updated><author><name>Tommy Blanchard</name></author><id>tag:tommyblanchard.com,2017-01-18:/this-website</id><summary type="html">&lt;p&gt;I felt it was fitting to write the first "Project" article on this website, since it's the most recent little project I've been working on.&lt;/p&gt;
&lt;h3&gt;Choosing a framework&lt;/h3&gt;
&lt;p&gt;I was looking for a few things in a website: Something easily customizable, easily publishable, capable of blog feeds, and that could â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I felt it was fitting to write the first "Project" article on this website, since it's the most recent little project I've been working on.&lt;/p&gt;
&lt;h3&gt;Choosing a framework&lt;/h3&gt;
&lt;p&gt;I was looking for a few things in a website: Something easily customizable, easily publishable, capable of blog feeds, and that could easily incorporate Jupyter Notebooks directly into it.&lt;/p&gt;
&lt;p&gt;Looking around, it seemed the best fit for the job were static site generators. Static site generators are just programs that take a bunch of content, your settings and templates/stylesheets, and create static HTML files. Static site generators are simple to use, easy to customize, don't require some awkward web UI, and publishing is extremely fast and doesn't even require me to visit a website. They also have the advantage of being fast compared to any dynamic websites since the server just has to serve a plain HTML page. There are a few other advantages to them - &lt;a href="https://davidwalsh.name/introduction-static-site-generators"&gt;I found this a helpful read&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With a static site generator, I can easily write an article in Markdown. Then with a couple simple terminal commands I can have it publish to the site.&lt;/p&gt;
&lt;h3&gt;Choosing a static site generator&lt;/h3&gt;
&lt;p&gt;It turns out &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; is the most popular static site generator. That means it has the advantage of the biggest community of support. However, there were two major disadvantages for me. &lt;/p&gt;
&lt;p&gt;First, Jekyll is written in Ruby. I'm not very familiar with Ruby, and don't currently have any reason to learn it (besides for Jekyll). This means if I wanted to dig into the code to customize things, it would be a big pain. &lt;/p&gt;
&lt;p&gt;Second, Jekyll doesn't have easy support for Jupyter Notebooks. I want to be able to do some data exploration in a Jupyter Notebook, and then just upload the notebook as an article easily. While it is &lt;a href="http://briancaffey.github.io/2016/03/14/ipynb-with-jekyll.html"&gt;possible to post Jupyter Notebooks with Jekyll&lt;/a&gt;, it isn't supported natively and takes extra steps.&lt;/p&gt;
&lt;p&gt;After doing some research, I ended up deciding on &lt;a href="http://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt;. Pelican is written in Python, my preferred language. With &lt;a href="https://github.com/danielfrg/pelican-ipynb"&gt;a simple plugin&lt;/a&gt;, publishing Jupyter Notebooks becomes almost as easy as publishing Markdown - a separate file needs to be created for the metadata. Making changes to notebooks and then republishing becomes trivial, and life is easy.&lt;/p&gt;
&lt;h3&gt;Website host&lt;/h3&gt;
&lt;p&gt;After I had figured out how I was going to create my website, I had to choose a place to put it. This was a no-brainer. Because I'm using a static website, I don't need any fancy server support. &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; is free and allows me to change my site just by pushing to a Github repo. It also allows custom URLs (though not with HTTPS currently). So the whole process for publishing an article is: write Markdown or Jupyter Notebook, run pelican to generate the site pages, commit and push to Github. Super easy and quick!&lt;/p&gt;
&lt;p&gt;If you're looking for a tutorial on how to set up your own Github hosted Pelican website, &lt;a href="https://www.dataquest.io/blog/how-to-setup-a-data-science-blog/"&gt;this tutorial&lt;/a&gt; is super helpful.&lt;/p&gt;</content><category term="Pelican"></category><category term="Python"></category><category term="Static site generators"></category></entry></feed>